##
# @package src.CalcUtils.parsetab
#
# @brief parsetab.py is yacc autogenerated file that contains all grammar rules used when parsing expressions in
# src.CalcUtils.parser

# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVrightUMINUSleftPOWSQRTleftLPARENRPARENFACTDIV FACT LPAREN MINUS MULT NUMBER PLUS POW RPAREN SQRTexpression : MINUS expression %prec UMINUSexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term MULT factorterm : term DIV factorfactor : factor SQRT factorfactor : factor POW factorfactor : term FACT\n                  | NUMBER FACTterm : factorfactor : NUMBERfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'MINUS':([0,1,2,3,4,5,6,9,12,15,16,17,18,20,21,22,23,24,],[2,8,2,-4,-11,-12,2,-1,-9,-10,8,-2,-3,-5,-6,-7,-8,-13,]),'NUMBER':([0,2,6,7,8,10,11,13,14,],[5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,2,6,7,8,10,11,13,14,],[6,6,6,6,6,6,6,6,6,]),'$end':([1,3,4,5,9,12,15,17,18,20,21,22,23,24,],[0,-4,-11,-12,-1,-9,-10,-2,-3,-5,-6,-7,-8,-13,]),'PLUS':([1,3,4,5,9,12,15,16,17,18,20,21,22,23,24,],[7,-4,-11,-12,-1,-9,-10,7,-2,-3,-5,-6,-7,-8,-13,]),'RPAREN':([3,4,5,9,12,15,16,17,18,20,21,22,23,24,],[-4,-11,-12,-1,-9,-10,24,-2,-3,-5,-6,-7,-8,-13,]),'MULT':([3,4,5,12,15,17,18,19,20,21,22,23,24,],[10,-11,-12,-9,-10,10,10,10,-5,-6,-7,-8,-13,]),'DIV':([3,4,5,12,15,17,18,19,20,21,22,23,24,],[11,-11,-12,-9,-10,11,11,11,-5,-6,-7,-8,-13,]),'FACT':([3,4,5,12,15,17,18,19,20,21,22,23,24,],[12,-11,15,-9,-10,12,12,12,-5,-6,-7,-8,-13,]),'SQRT':([4,5,12,15,20,21,22,23,24,],[13,-12,-9,-10,13,13,-7,-8,-13,]),'POW':([4,5,12,15,20,21,22,23,24,],[14,-12,-9,-10,14,14,-7,-8,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,6,],[1,9,16,]),'term':([0,2,6,7,8,10,11,13,14,],[3,3,3,17,18,19,19,19,19,]),'factor':([0,2,6,7,8,10,11,13,14,],[4,4,4,4,4,20,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','parser.py',54),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser.py',59),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser.py',64),
  ('expression -> term','expression',1,'p_expression_term','parser.py',69),
  ('term -> term MULT factor','term',3,'p_term_mult','parser.py',74),
  ('term -> term DIV factor','term',3,'p_term_div','parser.py',79),
  ('factor -> factor SQRT factor','factor',3,'p_factor_sqrt','parser.py',84),
  ('factor -> factor POW factor','factor',3,'p_factor_pow','parser.py',99),
  ('factor -> term FACT','factor',2,'p_term_fact','parser.py',104),
  ('factor -> NUMBER FACT','factor',2,'p_term_fact','parser.py',105),
  ('term -> factor','term',1,'p_term_factor','parser.py',116),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',121),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','parser.py',126),
]
